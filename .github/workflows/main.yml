name: Build and Deploy .NET Application to Amazon ECS

on:
  push:
    branches:
      - main  # Trigger workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger workflow on pull requests to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET 9.0 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'  # Install .NET 9.0 SDK

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release

    - name: Run tests
      run: dotnet test --configuration Release

    - name: Publish application
      run: dotnet publish --configuration Release --output ./publish

    - name: Build Docker image
      run: |
        docker build -t your-app-name .

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ap-south-1  # Specify the region here

    - name: Tag Docker image
      run: |
        docker tag your-app-name:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/your-repository-name:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/your-repository-name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures deployment runs only after the build job

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update ECS Service with new Docker image
      run: |
        aws ecs update-service \
          --cluster your-cluster-name \
          --service your-service-name \
          --force-new-deployment \
          --region ${{ secrets.AWS_REGION }}
